#ifndef ISA_H
#define ISA_H

#pragma once

/* Auto-generated by cbindgen. Do not edit. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>
#include "stdint.h"
#include "stdbool.h"

typedef enum InstrTag {
  TAG_INVALID = 0,
  TAG_ADD,
  TAG_SUB,
  TAG_ADDI,
  TAG_JALR,
  TAG_LW,
  TAG_SW,
  TAG_BEQ,
  TAG_LUI,
  TAG_AUIPC,
  TAG_JAL,
} InstrTag;

typedef enum IsaStatus {
  ISA_OK = 0,
  ISA_BAD_REG = 1,
  ISA_IMM_OUT_OF_RANGE = 2,
  ISA_BAD_OPCODE = 3,
  ISA_BAD_FUNCT = 4,
  ISA_NULL_PTR = 5,
  ISA_UNKNOWN = 255,
} IsaStatus;

typedef struct DecodedInstr {
  enum InstrTag tag;
  uint8_t rd;
  uint8_t rs1;
  uint8_t rs2;
  int32_t imm;
} DecodedInstr;

const char *isa_status_str(enum IsaStatus code);

enum IsaStatus isa_encode_add(uint8_t rd, uint8_t rs1, uint8_t rs2, uint32_t *out_word);

enum IsaStatus isa_encode_sub(uint8_t rd, uint8_t rs1, uint8_t rs2, uint32_t *out_word);

enum IsaStatus isa_encode_addi(uint8_t rd, uint8_t rs1, int32_t imm, uint32_t *out_word);

enum IsaStatus isa_encode_lw(uint8_t rd, uint8_t rs1, int32_t imm, uint32_t *out_word);

enum IsaStatus isa_encode_sw(uint8_t rs1, uint8_t rs2, int32_t imm, uint32_t *out_word);

enum IsaStatus isa_encode_beq(uint8_t rs1, uint8_t rs2, int32_t imm, uint32_t *out_word);

enum IsaStatus isa_encode_jal(uint8_t rd, int32_t imm, uint32_t *out_word);

enum IsaStatus isa_encode_jalr(uint8_t rd, uint8_t rs1, int32_t imm, uint32_t *out_word);

enum IsaStatus isa_encode_lui(uint8_t rd, int32_t imm20, uint32_t *out_word);

enum IsaStatus isa_encode_auipc(uint8_t rd, int32_t imm20, uint32_t *out_word);

enum IsaStatus isa_decode(uint32_t word, struct DecodedInstr *out_decoded);

uint8_t isa_field_rd(uint32_t word);

uint8_t isa_field_rs1(uint32_t word);

uint8_t isa_field_rs2(uint32_t word);

uint32_t isa_field_opcode(uint32_t word);

uint32_t isa_field_funct3(uint32_t word);

uint32_t isa_field_funct7(uint32_t word);

int32_t isa_imm_i(uint32_t word);

int32_t isa_imm_s(uint32_t word);

int32_t isa_imm_b(uint32_t word);

int32_t isa_imm_u(uint32_t word);

int32_t isa_imm_j(uint32_t word);

uint32_t isa_ffi_version(void);

#endif  /* ISA_H */
